/*
 * UserInterface.java
 *
 * Created on 29.03.2010, 17:14:17
 */
package dbPediaQAF;

import dbPediaQAF.xmlQuery.Snippet;
import dbPediaQAF.xmlQuery.ArticleItem;
import dbPediaQAF.xmlQuery.ArticleItemCol;
import dbPediaQAF.xmlQuery.Article;
import java.awt.Color;
import java.net.URL;
import java.io.*;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.sql.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Paul
 */
public class UserInterface extends javax.swing.JFrame {

    /** Creates new form UserInterface */
    public UserInterface() {
        initComponents();
        connect();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        currentArticleLabel = new javax.swing.JLabel();
        currentArticleField = new javax.swing.JTextField();
        getArticleButton = new javax.swing.JButton();
        nextUndoneArticleButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentArticleWikiCodePane = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fullDataArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        targetDataArea = new javax.swing.JTextArea();
        FullDataLabel = new javax.swing.JLabel();
        targetDataLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        patternClassesList = new javax.swing.JList();
        saveArticleButton = new javax.swing.JButton();
        nextSnippetButton = new javax.swing.JButton();
        patternClassLabel = new javax.swing.JLabel();
        previousSnippetButton = new javax.swing.JButton();
        newSnippetButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        commentArea = new javax.swing.JTextArea();
        commentLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        currentSnippetArea = new javax.swing.JTextArea();
        codeSnippetLabel = new javax.swing.JLabel();
        previousArticleButton = new javax.swing.JButton();
        nextArticleButton = new javax.swing.JButton();
        statsLabel = new javax.swing.JLabel();
        articleDoneCheckBox = new javax.swing.JCheckBox();
        articleStatusLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        currentArticleLabel.setText("Article");

        currentArticleField.setText("Cape_Town");

        getArticleButton.setText("Get");
        getArticleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getArticleButtonActionPerformed(evt);
            }
        });

        nextUndoneArticleButton.setText("Next Undone");
        nextUndoneArticleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextUndoneArticleButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(currentArticleWikiCodePane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(currentArticleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentArticleField, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getArticleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextUndoneArticleButton))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentArticleLabel)
                    .addComponent(currentArticleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextUndoneArticleButton)
                    .addComponent(getArticleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE))
        );

        fullDataArea.setColumns(20);
        fullDataArea.setRows(5);
        jScrollPane2.setViewportView(fullDataArea);

        targetDataArea.setColumns(20);
        targetDataArea.setRows(5);
        targetDataArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                targetDataAreaKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(targetDataArea);

        FullDataLabel.setText("Current Extr.");

        targetDataLabel.setText("Gold Standard");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FullDataLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetDataLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(FullDataLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                .addComponent(targetDataLabel))
        );

        patternClassesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "PlainProperty", "Coordinates", "NumberUnit", "Interval", "List", "OnePropertyTable", "MultiPropertyTable", "OpenProperty", "OpenPropertyTable", "InternalTemplate", "MergedProperties", "ToDo" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        patternClassesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patternClassesListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(patternClassesList);

        saveArticleButton.setText("Save Article");
        saveArticleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveArticleButtonActionPerformed(evt);
            }
        });

        nextSnippetButton.setText("Next Snippet");
        nextSnippetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextSnippetButtonActionPerformed(evt);
            }
        });

        patternClassLabel.setText("Pattern Category");

        previousSnippetButton.setText("Previous Snippet");
        previousSnippetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousSnippetButtonActionPerformed(evt);
            }
        });

        newSnippetButton.setText("New Snippet");
        newSnippetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSnippetButtonActionPerformed(evt);
            }
        });

        commentArea.setColumns(20);
        commentArea.setRows(5);
        commentArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                commentAreaKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(commentArea);

        commentLabel.setText("Comment");

        currentSnippetArea.setColumns(20);
        currentSnippetArea.setRows(5);
        currentSnippetArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                currentSnippetAreaKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(currentSnippetArea);

        codeSnippetLabel.setText("Wiki Code Snippet");

        previousArticleButton.setText("Previous Article");
        previousArticleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousArticleButtonActionPerformed(evt);
            }
        });

        nextArticleButton.setText("Next Article");
        nextArticleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextArticleButtonActionPerformed(evt);
            }
        });

        statsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statsLabel.setText("ID: 0 (0 of 100 Done)");

        articleDoneCheckBox.setText("Article Done");
        articleDoneCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                articleDoneCheckBoxActionPerformed(evt);
            }
        });

        statusLabel.setForeground(new java.awt.Color(204, 0, 0));
        statusLabel.setText("  ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(previousSnippetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(nextSnippetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(newSnippetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(nextArticleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(previousArticleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(saveArticleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(statsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(articleDoneCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(articleStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(commentLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(codeSnippetLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(patternClassLabel)
                        .addContainerGap(131, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(patternClassLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(previousSnippetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextSnippetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newSnippetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveArticleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(previousArticleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextArticleButton))
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(articleDoneCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(articleStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(codeSnippetLabel))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(commentLabel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getArticleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getArticleButtonActionPerformed
        try {
            String articleName = currentArticleField.getText();
            currentArticleWikiCodePane.setText(getArticleWikiCodeFromDB(articleName));
            //currentArticleWikiCodePane.setText(getArticleWikiCodeLive(articleName));
            currentArticleWikiCodePane.setCaretPosition(0);
            //System.out.println(getArticleWikiCodeFromDB(articleName));
            fullDataArea.setText(getActualData(articleName));
            //file = new File(path + articleName + ".xml");
            file = new File(path + URLEncoder.encode(articleName, "UTF-8") + ".xml");
            setup();
            //System.out.println(articleItem.getUri());
            if (file.exists()) {
                try {
                    article = Article.load(file);
                    article.setName(articleName);
                    snippet = article.getSnippet(0);
                    updateSnippetView(snippet);
                    updateArticleItemView();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Couldn't load article. Details:" + ex.getMessage(), "Error loading article", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                article = new Article();
                article.setName(articleName);
                this.newSnippetButtonActionPerformed(evt);
                updateArticleItemView();
            }
            //System.out.println(getArticleWikiCode(article));
            //System.out.println(getArticleWikiCode(article));
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getArticleButtonActionPerformed

    private void nextSnippetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextSnippetButtonActionPerformed
        if (snippet.getPatternClass() == null) {
            statusLabel.setText("MISSING PC");
        } else {
            if (snippet.getId() < article.getSnippet().size() - 1) {
                snippet = article.getSnippet(snippet.getId() + 1);
            }
            updateSnippetView(snippet);
        }
    }//GEN-LAST:event_nextSnippetButtonActionPerformed

    private void previousSnippetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousSnippetButtonActionPerformed
        if (snippet.getPatternClass() == null) {
            statusLabel.setText("MISSING PC");
        } else {
        if (snippet.getId() > 0) {
            snippet = article.getSnippet(snippet.getId() - 1);
        }
        updateSnippetView(snippet);
        }
    }//GEN-LAST:event_previousSnippetButtonActionPerformed

    private void newSnippetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSnippetButtonActionPerformed
        snippet = new Snippet();
        snippet.setId(article.getSnippet().size());
        article.addSnippet(snippet);
        updateSnippetView(snippet);
    }//GEN-LAST:event_newSnippetButtonActionPerformed

    private void saveArticleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveArticleButtonActionPerformed
        try {
            article.save(file);
            //updateArticleItemView();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Couldn't save article. Details:" + ex.getMessage(),
                    "Error saving article", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_saveArticleButtonActionPerformed

    private void patternClassesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patternClassesListMouseClicked
        snippet.setPatternClass((String) patternClassesList.getSelectedValue());
    }//GEN-LAST:event_patternClassesListMouseClicked

    private void commentAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commentAreaKeyReleased
        snippet.setComment(commentArea.getText());
    }//GEN-LAST:event_commentAreaKeyReleased

    private void targetDataAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_targetDataAreaKeyReleased
        snippet.setTriple(targetDataArea.getText());
    }//GEN-LAST:event_targetDataAreaKeyReleased

    private void currentSnippetAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currentSnippetAreaKeyReleased
        snippet.setSource(currentSnippetArea.getText());
    }//GEN-LAST:event_currentSnippetAreaKeyReleased

    private void nextUndoneArticleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextUndoneArticleButtonActionPerformed
        setup();
        if (articleListfile.exists()) {
            try {
                //root = ArticleItemCol.load(articleListfile);
                articleListItem = articleList.getLastUndoneArticleItem();
                String articleUri = articleListItem.getUri();
                if (articleUri.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "All articles are marked as done.",
                            "All Done!", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    currentArticleField.setText(articleUri);
                    this.getArticleButtonActionPerformed(evt);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Couldn't load articleItem. Details:" + ex.getMessage(),
                        "Error loading articleItem", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            try {
                throw new FileNotFoundException(articleListPath + "not found.");
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Couldn't load File. Details:" + ex.getMessage(),
                        "Error loading articles", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_nextUndoneArticleButtonActionPerformed

    private void nextArticleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextArticleButtonActionPerformed
        try {
            this.saveArticleButtonActionPerformed(evt);
            if (articleListItem.getId() < articleList.getArticleItem().size() - 1) {
                articleListItem = articleList.getArticleItem(articleListItem.getId() + 1);
                currentArticleField.setText(articleListItem.getUri());
                this.getArticleButtonActionPerformed(evt);
            }
        } catch (NullPointerException ex) {
            this.nextUndoneArticleButtonActionPerformed(evt);
        }
    }//GEN-LAST:event_nextArticleButtonActionPerformed

    private void previousArticleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousArticleButtonActionPerformed
        try {
            if (articleListItem.getId() > 0) {
                this.saveArticleButtonActionPerformed(evt);
                articleListItem = articleList.getArticleItem(articleListItem.getId() - 1);
                currentArticleField.setText(articleListItem.getUri());
                this.getArticleButtonActionPerformed(evt);
            }
        } catch (NullPointerException ex) {
            this.nextUndoneArticleButtonActionPerformed(evt);
        }
    }//GEN-LAST:event_previousArticleButtonActionPerformed

    private void articleDoneCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_articleDoneCheckBoxActionPerformed
        setup();
        try {
            this.saveArticleButtonActionPerformed(evt);
            articleListItem.setDone(articleDoneCheckBox.isSelected());
            updateArticleItemView();
            articleList.save(articleListfile);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Couldn't load articleItem. Details:" + ex.getMessage(),
                    "Error loading articleItem", JOptionPane.WARNING_MESSAGE);
        }
        //System.out.println(articleItem.isDone());
    }//GEN-LAST:event_articleDoneCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FullDataLabel;
    private javax.swing.JCheckBox articleDoneCheckBox;
    private javax.swing.JLabel articleStatusLabel;
    private javax.swing.JLabel codeSnippetLabel;
    private javax.swing.JTextArea commentArea;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JTextField currentArticleField;
    private javax.swing.JLabel currentArticleLabel;
    private javax.swing.JTextPane currentArticleWikiCodePane;
    private javax.swing.JTextArea currentSnippetArea;
    private javax.swing.JTextArea fullDataArea;
    private javax.swing.JButton getArticleButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton newSnippetButton;
    private javax.swing.JButton nextArticleButton;
    private javax.swing.JButton nextSnippetButton;
    private javax.swing.JButton nextUndoneArticleButton;
    private javax.swing.JLabel patternClassLabel;
    private javax.swing.JList patternClassesList;
    private javax.swing.JButton previousArticleButton;
    private javax.swing.JButton previousSnippetButton;
    private javax.swing.JButton saveArticleButton;
    private javax.swing.JLabel statsLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextArea targetDataArea;
    private javax.swing.JLabel targetDataLabel;
    // End of variables declaration//GEN-END:variables
    private PreparedStatement statement = null;
    private Connection con = null;
    private Snippet snippet;
    private Article article;
    private static ArticleItemCol articleList;
    private ArticleItem articleListItem;
    private File file;
    private static File articleListfile;
    //private static final String path = "C:/Users/Paul/Documents/Projects/Diplomarbeit/DBpediaQAF/articles/data/";
    private static final String path = Config.getDataPath();
    //private static final String articleListPath = "C:/Users/Paul/Documents/Projects/Diplomarbeit/DBpediaQAF/articles/articles.xml";
    private static final String articleListPath = Config.getArticleListPath();

    private void connect() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(Config.getLocalDatabase(), Config.getUser(), Config.getPassw());
            //statement = (PreparedStatement) con.createStatement();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public String getArticleWikiCodeLive(String article) {
        String requestUrl = Config.getUrlToLocalWikipedia()  + "index.php?title=" + article + "&action=edit&dblang=en";
        //String requestUrl = "http://en.wikipedia.org/w/index.php?title=" + article + "&action=edit";
        String output = "";
        try {
            URL url = new URL(requestUrl.toString());
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            Boolean isRel = false;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains("<textarea")) {
                    isRel = true;
                }
                if (inputLine.contains("</textarea>")) {
                    isRel = false;
                }
                if (isRel) {
                    output = output + inputLine + "\n";
                }
            }
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return output;
    }

    private String getArticleWikiCodeFromDB(String article) {
        ResultSet rs = null;
        String output = null;
        try {
            //String query = "SELECT * FROM page WHERE page_title = '" + article + "' AND page_namespace = 0 ";
            //String query = "select old_text from text t inner join page p on (p.page_latest = t.old_id) where p.page_title = '" + URLDecoder.decode(article, "UTF-8") + "' and page_namespace = 0 ";
            //String query = "select old_text from text t inner join page p on (p.page_latest = t.old_id) where p.page_title = '" + article + "' and page_namespace = 0 ";
            //System.out.println(query);
            statement = con.prepareStatement ("select old_text from text t inner join page p on (p.page_latest = t.old_id) where p.page_title = ? and page_namespace = ?");
            statement.setString(1,article);
            statement.setInt(2,0);

            rs = statement.executeQuery();
            while (rs.next()) {
                output = rs.getString("old_text");
            }
        } catch (Exception ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException sqlEx) { // ignore }
                    rs = null;
                }
            }
        }
        return output;
    }

    private String getActualData(String article) {
        //"http://mappings.dbpedia.org/server/extraction/en/extract?title=" + article + "&format=N-Triples"
        //"http://mappings.dbpedia.org/server/extraction/extract?title=" + article + "&format=N-Triples"
        // TODO: get extraction from local mediawiki.
        String requestUrl = "http://mappings.dbpedia.org/server/extraction/en/extract?title=" + article + "&format=N-Triples";
        String buffer = "";
        try {
            URL url = new URL(requestUrl.toString());
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                buffer = buffer + inputLine + "\n";
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return buffer;
    }

    private void updateSnippetView(Snippet snippet) {
        statusLabel.setText(" ");
        currentSnippetArea.setText(snippet.getSource());
        currentSnippetArea.setCaretPosition(0);
        targetDataArea.setText(snippet.getTriple());
        commentArea.setText(snippet.getComment());
        patternClassesList.clearSelection();
        patternClassesList.setSelectedValue(snippet.getPatternClass(), true);
        formatWikiCodeArea();
    }

    private void updateArticleItemView() {
        articleDoneCheckBox.setSelected(articleListItem.isDone());
        int numArticles = articleList.getArticleItem().size();
        int numDoneArticles = articleList.getDoneArticleItems().size();
        // ID: 1 (0 of 100 Done)
        int articleNumber = articleListItem.getId() + 1;
        statsLabel.setText("ID: " + articleNumber + " ("+numDoneArticles + " of " + numArticles + " Done)");
    }

    private void setup() {
        try {
            articleListfile = new File(articleListPath);
            articleList = ArticleItemCol.load(articleListfile);
            //System.out.println(currentArticleField.getText());
            articleListItem = articleList.getArticleItem(currentArticleField.getText());
            //System.out.println(articleItem.getUri());
            if (articleListItem.getUri() == null) {
                articleStatusLabel.setText("No sample article!");
                //JOptionPane.showMessageDialog(this, "Current article is not a sample article.",
                //        "Stick to the sample", JOptionPane.INFORMATION_MESSAGE);
            } else {
                articleStatusLabel.setText("");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Couldn't load root. Details:" + ex.getMessage(),
                    "Error loading root", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void formatWikiCodeArea() {
        StyledDocument doc2 = currentArticleWikiCodePane.getStyledDocument();
        Style style2 = currentArticleWikiCodePane.addStyle("white", null);
        StyleConstants.setBackground(style2, Color.white);
        doc2.setCharacterAttributes(0, currentArticleWikiCodePane.getDocument().getLength(), currentArticleWikiCodePane.getStyle("white"), false);

        List<Snippet> snippets = article.getSnippet();
        //System.out.println(snippets.isEmpty());
        if (!snippets.isEmpty()) {
            for (Snippet snippetItem : snippets) {
                if (snippetItem.getSource() != null) {
                    for (String snippetRow : snippetItem.getSource().split("\n")) {
                        int rowIndex = currentArticleWikiCodePane.getText().indexOf(snippetRow);
                        if (rowIndex != -1) {
                            //int end = rowIndex + snippetRow.length();
                            //currentArticleWikiCodePane.select(rowIndex, end);
                            StyledDocument doc = currentArticleWikiCodePane.getStyledDocument();
                            Style style = currentArticleWikiCodePane.addStyle("green", null);
                            StyleConstants.setBackground(style, Color.green);
                            doc.setCharacterAttributes(rowIndex, snippetRow.length(), currentArticleWikiCodePane.getStyle("green"), false);
                        }
                    }
                }
            }
        }
    }
}
