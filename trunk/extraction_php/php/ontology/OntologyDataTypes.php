<?php
namespace dbpedia\ontology
{
use dbpedia\ontology\dataTypes\DataType;
use dbpedia\ontology\dataTypes\StandardUnitDataType;
use dbpedia\ontology\dataTypes\DimensionDataType;
use dbpedia\ontology\dataTypes\UnitDataType;
use dbpedia\ontology\dataTypes\DivisorUnitDataType;
use dbpedia\ontology\dataTypes\EnumerationDataType;
use dbpedia\ontology\dataTypes\FactorUnitDataType;
use dbpedia\ontology\dataTypes\InconvertibleUnitDataType;
use dbpedia\ontology\dataTypes\OffsetFactorUnitDataType;

/**
 *
 */
class OntologyUnitBuilder
{
    /** Ontology to which data types are added */
    private /* final Ontology */ $ontology;
    
    /** Current dimension */
    private /* DimensionDataType */ $dimension = null;
    
    /**
     * @param $ontology Ontology to which data types are added
     */
    public function __construct( $ontology )
    {
        if (! ($ontology instanceof Ontology)) throw new \InvalidArgumentException('ontology must be an Ontology');
        $this->ontology = $ontology;
    }
    
    public function addDimension( $name )
    {
        if (! is_string($name)) throw new \InvalidArgumentException('name must be a string');
        $this->dimension = new DimensionDataType($name);
        $this->ontology->addDataType($this->dimension);
    }
    
    public function addUnit( $unit )
    {
        if (! ($unit instanceof UnitDataType)) throw new \InvalidArgumentException('unit must be a UnitDataType');
        if ($this->dimension === null) throw new \InvalidArgumentException('dimension not set');
        $this->dimension->addUnit($unit);
        $this->ontology->addDataType($unit);
    }
}

/**
 * Note: the initial revision of this class was generated by revision 1964 of this class.
 * TODO: this is a hack. Data types should be configured in configuration files.
 */
class OntologyDataTypes
{
    public static function addDataTypes( $ontology )
    {
        
    $ontology->addDataType(new DataType('xsd:date', 'http://www.w3.org/2001/XMLSchema#date'));
    $ontology->addDataType(new DataType('xsd:time', 'http://www.w3.org/2001/XMLSchema#time'));
    $ontology->addDataType(new DataType('xsd:dateTime', 'http://www.w3.org/2001/XMLSchema#dateTime'));
    $ontology->addDataType(new DataType('xsd:gYear', 'http://www.w3.org/2001/XMLSchema#gYear'));
    $ontology->addDataType(new DataType('xsd:gYearMonth', 'http://www.w3.org/2001/XMLSchema#gYearMonth'));
    $ontology->addDataType(new DataType('xsd:gMonth', 'http://www.w3.org/2001/XMLSchema#gMonth'));
    $ontology->addDataType(new DataType('xsd:gMonthDay', 'http://www.w3.org/2001/XMLSchema#gMonthDay'));
    $ontology->addDataType(new DataType('xsd:gDay', 'http://www.w3.org/2001/XMLSchema#gDay'));
    $ontology->addDataType(new DataType('xsd:boolean', 'http://www.w3.org/2001/XMLSchema#boolean'));
    $ontology->addDataType(new DataType('xsd:string', 'http://www.w3.org/2001/XMLSchema#string'));
    $ontology->addDataType(new DataType('xsd:integer', 'http://www.w3.org/2001/XMLSchema#integer'));
    $ontology->addDataType(new DataType('xsd:double', 'http://www.w3.org/2001/XMLSchema#double'));
    $ontology->addDataType(new DataType('xsd:float', 'http://www.w3.org/2001/XMLSchema#float'));

    $fuelType = new EnumerationDataType('fuelType');
    $fuelType->addLiteral('diesel');
    $fuelType->addLiteral('petrol');
    $ontology->addDataType($fuelType);

    //Engine Configurations (Source: http://en.wikipedia.org/wiki/Template:Piston_engine_configurations)
    $engineConfiguration = new EnumerationDataType('engineConfiguration');
    
    $engineConfiguration->addLiteral('straight-two'  , array('I2' , 'inline 2' , 'inline twin', 'parallel twin'));
    $engineConfiguration->addLiteral('straight-three', array('I3' , 'inline 3' , 'inline-three'));
    $engineConfiguration->addLiteral('straight-four' , array('I4' , 'inline 4' , 'inline-four'));
    $engineConfiguration->addLiteral('straight-five' , array('I5' , 'inline 5' , 'inline-five'));
    $engineConfiguration->addLiteral('straight-six'  , array('I6' , 'inline 6' , 'inline-six'));
    $engineConfiguration->addLiteral('straight-eight', array('I8' , 'inline 8' , 'inline-eight'));
    $engineConfiguration->addLiteral('straight-nine' , array('I9' , 'inline 9' , 'inline-nine'));
    $engineConfiguration->addLiteral('straight-10'   , array('I10', 'inline 10', 'inline-10'));
    $engineConfiguration->addLiteral('straight-12'   , array('I12', 'inline 12', 'inline-12'));
    $engineConfiguration->addLiteral('straight-14'   , array('I14', 'inline 14', 'inline-14'));

    //TODO add all alternatives
    $engineConfiguration->addLiteral('flat-twin', array('F2', 'H2'));
    $engineConfiguration->addLiteral('F4');
    $engineConfiguration->addLiteral('F6');
    $engineConfiguration->addLiteral('F8');
    $engineConfiguration->addLiteral('F10');
    $engineConfiguration->addLiteral('F12');
    $engineConfiguration->addLiteral('F16');

    $engineConfiguration->addLiteral('V2');
    $engineConfiguration->addLiteral('V4');
    $engineConfiguration->addLiteral('V5');
    $engineConfiguration->addLiteral('V6');
    $engineConfiguration->addLiteral('V8');
    $engineConfiguration->addLiteral('V10');
    $engineConfiguration->addLiteral('V12');
    $engineConfiguration->addLiteral('V16');
    $engineConfiguration->addLiteral('V20');
    $engineConfiguration->addLiteral('V24');

    $engineConfiguration->addLiteral('W8');
    $engineConfiguration->addLiteral('W12');
    $engineConfiguration->addLiteral('W16');
    $engineConfiguration->addLiteral('W18');

    $engineConfiguration->addLiteral('H');
    $engineConfiguration->addLiteral('U');
    $engineConfiguration->addLiteral('Square four');
    $engineConfiguration->addLiteral('VR');//TODO add VR6 etc. ?
    $engineConfiguration->addLiteral('Opposed');
    $engineConfiguration->addLiteral('X');
    $engineConfiguration->addLiteral('Single');
    $engineConfiguration->addLiteral('Radial');
    $engineConfiguration->addLiteral('Rotary');
    $engineConfiguration->addLiteral('Deltic');
    $engineConfiguration->addLiteral('Pistonless');
    $engineConfiguration->addLiteral('Wankel');

    $ontology->addDataType($engineConfiguration);

    //Valvetrain
    $valvetrain = new EnumerationDataType('valvetrain');

    $valvetrain->addLiteral('SOHC');
    $valvetrain->addLiteral('DOHC');
    $valvetrain->addLiteral('L-head', array('L-block', 'flathead', 'sidevalve'));
    $valvetrain->addLiteral('F-head');
    $valvetrain->addLiteral('I-head', array('OHV'));
    $valvetrain->addLiteral('Camless');

    $ontology->addDataType($valvetrain);

    //Units
    $builder = new OntologyUnitBuilder($ontology);
    
    $builder->addDimension('Area');
    $builder->addUnit(new StandardUnitDataType('squareMetre', array('square metre','m2','m²')));
    $builder->addUnit(new FactorUnitDataType('squareMillimetre', array('mm2','mm²','square millimetre'), 1.0E-6));
    $builder->addUnit(new FactorUnitDataType('squareCentimetre', array('cm2','cm²','square centimetre'), 0.0001));
    $builder->addUnit(new FactorUnitDataType('squareDecimetre', array('dm2','square decimetre'), 0.01));
    $builder->addUnit(new FactorUnitDataType('squareDecametre', array('dam2','square decametre'), 0.1));
    $builder->addUnit(new FactorUnitDataType('squareHectometre', array('hm2','square hectometre'), 10000.0));
    $builder->addUnit(new FactorUnitDataType('squareKilometre', array('km²','km2','square kilometre','km\u00B2'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('hectare', array('ha','hectare'), 10000.0));
    $builder->addUnit(new FactorUnitDataType('squareInch', array('sqin','square inch'), 0.00064516));
    $builder->addUnit(new FactorUnitDataType('squareFoot', array('sqft','ft2','ft²','square foot'), 0.09290304));
    $builder->addUnit(new FactorUnitDataType('squareYard', array('sqyd','square yard'), 0.83612736));
    $builder->addUnit(new FactorUnitDataType('acre', array('acre','acres'), 4046.564224));
    $builder->addUnit(new FactorUnitDataType('squareMile', array('sqmi','mi2','mi²','square mile'), 2589988.110336));
    $builder->addUnit(new FactorUnitDataType('squareNauticalMile', array('sqnmi','nmi2','square nautical mile'), 3429904.0));

    $builder->addDimension('Currency');
    $builder->addUnit(new InconvertibleUnitDataType('usDollar', array('$','US$','USD','Dollar','US dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('euro', array('€','EUR','Euro')));
    $builder->addUnit(new InconvertibleUnitDataType('poundSterling', array('GBP','British Pound','£','Pound sterling')));
    $builder->addUnit(new InconvertibleUnitDataType('japaneseYen', array('¥','yen','JPY','Japanese yen')));
    $builder->addUnit(new InconvertibleUnitDataType('russianRouble', array('RUR','RUB','Russian rouble')));
    $builder->addUnit(new InconvertibleUnitDataType('unitedArabEmiratesDirham', array('AED','United Arab Emirates dirham')));
    $builder->addUnit(new InconvertibleUnitDataType('afghanAfghani', array('AFN','Afghani')));
    $builder->addUnit(new InconvertibleUnitDataType('albanianLek', array('ALL','Lek')));
    $builder->addUnit(new InconvertibleUnitDataType('armenianDram', array('AMD','Armenian dram')));
    $builder->addUnit(new InconvertibleUnitDataType('netherlandsAntilleanGuilder', array('ANG','Netherlands Antillean guilder')));
    $builder->addUnit(new InconvertibleUnitDataType('angolanKwanza', array('AOA','Kwanza')));
    $builder->addUnit(new InconvertibleUnitDataType('argentinePeso', array('ARS','Argentine peso')));
    $builder->addUnit(new InconvertibleUnitDataType('australianDollar', array('AUD','Australian dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('arubanGuilder', array('AWG','Aruban guilder')));
    $builder->addUnit(new InconvertibleUnitDataType('bosniaAndHerzegovinaConvertibleMarks', array('BAM','Convertible marks')));
    $builder->addUnit(new InconvertibleUnitDataType('barbadosDollar', array('BBD','Barbados dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('bangladeshiTaka', array('BDT','Bangladeshi taka')));
    $builder->addUnit(new InconvertibleUnitDataType('bulgarianLev', array('BGN','Bulgarian lev')));
    $builder->addUnit(new InconvertibleUnitDataType('bahrainiDinar', array('BHD','Bahraini dinar')));
    $builder->addUnit(new InconvertibleUnitDataType('burundianFranc', array('BIF','Burundian franc')));
    $builder->addUnit(new InconvertibleUnitDataType('bermudianDollar', array('BMD','Bermudian dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('bruneiDollar', array('BND','Brunei dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('bolivianBoliviano', array('BOB','Boliviano')));
    $builder->addUnit(new InconvertibleUnitDataType('brazilianReal', array('BRL','Brazilian real')));
    $builder->addUnit(new InconvertibleUnitDataType('bahamianDollar', array('BSD','Bahamian dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('bhutaneseNgultrum', array('BTN','Ngultrum')));
    $builder->addUnit(new InconvertibleUnitDataType('botswanaPula', array('BWP','Pula')));
    $builder->addUnit(new InconvertibleUnitDataType('belarussianRuble', array('BYR','Belarussian ruble')));
    $builder->addUnit(new InconvertibleUnitDataType('belizeDollar', array('BZD','Belize dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('canadianDollar', array('CAD','Canadian dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('congoleseFranc', array('CDF','Franc Congolais')));
    $builder->addUnit(new InconvertibleUnitDataType('swissFranc', array('CHF','Swiss franc')));
    $builder->addUnit(new InconvertibleUnitDataType('chileanPeso', array('CLP','Chilean peso')));
    $builder->addUnit(new InconvertibleUnitDataType('renminbi', array('CNY','Renminbi')));
    $builder->addUnit(new InconvertibleUnitDataType('colombianPeso', array('COP','Colombian peso')));
    // ??? $builder->addUnit(new InconvertibleUnitDataType('unidadDeValorReal', array('COU','Unidad de Valor Real')));
    $builder->addUnit(new InconvertibleUnitDataType('costaRicanColon', array('CRC','Costa Rican colon','Costa Rican colón')));
    $builder->addUnit(new InconvertibleUnitDataType('cubanPeso', array('CUP','Cuban peso')));
    $builder->addUnit(new InconvertibleUnitDataType('capeVerdeEscudo', array('CVE','Cape Verde escudo')));
    $builder->addUnit(new InconvertibleUnitDataType('czechKoruna', array('CZK','Czech koruna')));
    $builder->addUnit(new InconvertibleUnitDataType('djiboutianFranc', array('DJF','Djibouti franc')));
    $builder->addUnit(new InconvertibleUnitDataType('danishKrone', array('DKK','Danish krone')));
    $builder->addUnit(new InconvertibleUnitDataType('dominicanPeso', array('DOP','Dominican peso')));
    $builder->addUnit(new InconvertibleUnitDataType('algerianDinar', array('DZD','Algerian dinar')));
    $builder->addUnit(new InconvertibleUnitDataType('estonianKroon', array('EEK','Kroon')));
    $builder->addUnit(new InconvertibleUnitDataType('egyptianPound', array('EGP','Egyptian pound')));
    $builder->addUnit(new InconvertibleUnitDataType('eritreanNakfa', array('ERN','Nakfa')));
    $builder->addUnit(new InconvertibleUnitDataType('ethiopianBirr', array('ETB','Ethiopian birr')));
    $builder->addUnit(new InconvertibleUnitDataType('fijiDollar', array('FJD','Fiji dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('falklandIslandsPound', array('FKP','Falkland Islands pound')));
    $builder->addUnit(new InconvertibleUnitDataType('georgianLari', array('GEL','Lari')));
    $builder->addUnit(new InconvertibleUnitDataType('ghanaianCedi', array('GHS','Cedi')));
    $builder->addUnit(new InconvertibleUnitDataType('gibraltarPound', array('GIP','Gibraltar pound')));
    $builder->addUnit(new InconvertibleUnitDataType('gambianDalasi', array('GMD','Dalasi')));
    $builder->addUnit(new InconvertibleUnitDataType('guineaFranc', array('GNF','Guinea franc')));
    $builder->addUnit(new InconvertibleUnitDataType('guatemalanQuetzal', array('GTQ','Quetzal')));
    $builder->addUnit(new InconvertibleUnitDataType('guyanaDollar', array('GYD','Guyana dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('hongKongDollar', array('HKD','Hong Kong dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('honduranLempira', array('HNL','Lempira')));
    $builder->addUnit(new InconvertibleUnitDataType('croatianKuna', array('HRK','Croatian kuna')));
    $builder->addUnit(new InconvertibleUnitDataType('haitiGourde', array('HTG','Haiti gourde')));
    $builder->addUnit(new InconvertibleUnitDataType('hungarianForint', array('HUF','Forint')));
    $builder->addUnit(new InconvertibleUnitDataType('indonesianRupiah', array('IDR','Rupiah')));
    $builder->addUnit(new InconvertibleUnitDataType('israeliNewSheqel', array('ILS','Israeli new sheqel')));
    $builder->addUnit(new InconvertibleUnitDataType('indianRupee', array('INR','Indian rupee')));
    $builder->addUnit(new InconvertibleUnitDataType('iraqiDinar', array('IQD','Iraqi dinar')));
    $builder->addUnit(new InconvertibleUnitDataType('iranianRial', array('IRR','Iranian rial')));
    $builder->addUnit(new InconvertibleUnitDataType('icelandKrona', array('ISK','Iceland krona')));
    $builder->addUnit(new InconvertibleUnitDataType('jamaicanDollar', array('JMD','Jamaican dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('jordanianDinar', array('JOD','Jordanian dinar')));
    $builder->addUnit(new InconvertibleUnitDataType('kenyanShilling', array('KES','Kenyan shilling')));
    $builder->addUnit(new InconvertibleUnitDataType('kyrgyzstaniSom', array('KGS','Som')));
    $builder->addUnit(new InconvertibleUnitDataType('uzbekistanSom', array('UZS','Uzbekistan som')));
    $builder->addUnit(new InconvertibleUnitDataType('cambodianRiel', array('KHR','Riel')));
    $builder->addUnit(new InconvertibleUnitDataType('comorianFranc', array('KMF','Comoro franc')));
    $builder->addUnit(new InconvertibleUnitDataType('northKoreanWon', array('KPW','North Korean won')));
    $builder->addUnit(new InconvertibleUnitDataType('southKoreanWon', array('KRW','South Korean won')));
    $builder->addUnit(new InconvertibleUnitDataType('kuwaitiDinar', array('KWD','Kuwaiti dinar')));
    $builder->addUnit(new InconvertibleUnitDataType('caymanIslandsDollar', array('KYD','Cayman Islands dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('kazakhstaniTenge', array('KZT','Tenge')));
    $builder->addUnit(new InconvertibleUnitDataType('laoKip', array('LAK','Kip')));
    $builder->addUnit(new InconvertibleUnitDataType('lebanesePound', array('LBP','Lebanese pound')));
    $builder->addUnit(new InconvertibleUnitDataType('sriLankanRupee', array('LKR','Sri Lanka rupee')));
    $builder->addUnit(new InconvertibleUnitDataType('liberianDollar', array('LRD','Liberian dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('lesothoLoti', array('LSL','Loti')));
    $builder->addUnit(new InconvertibleUnitDataType('lithuanianLitas', array('LTL','Lithuanian litas')));
    $builder->addUnit(new InconvertibleUnitDataType('latvianLats', array('LVL','Latvian lats')));
    $builder->addUnit(new InconvertibleUnitDataType('libyanDinar', array('LYD','Libyan dinar')));
    $builder->addUnit(new InconvertibleUnitDataType('moroccanDirham', array('MAD','Moroccan dirham')));
    $builder->addUnit(new InconvertibleUnitDataType('moldovanLeu', array('MDL','Moldovan leu')));
    $builder->addUnit(new InconvertibleUnitDataType('malagasyAriary', array('MGA','Malagasy ariary')));
    $builder->addUnit(new InconvertibleUnitDataType('macedonianDenar', array('MKD','Denar')));
    $builder->addUnit(new InconvertibleUnitDataType('myanmaKyat', array('MMK','Kyat')));
    $builder->addUnit(new InconvertibleUnitDataType('mongolianTögrög', array('MNT','Tugrik')));
    $builder->addUnit(new InconvertibleUnitDataType('macanesePataca', array('MOP','Pataca')));
    $builder->addUnit(new InconvertibleUnitDataType('mauritanianOuguiya', array('MRO','Ouguiya')));
    $builder->addUnit(new InconvertibleUnitDataType('mauritianRupee', array('MUR','Mauritius rupee')));
    $builder->addUnit(new InconvertibleUnitDataType('maldivianRufiyaa', array('MVR','Rufiyaa')));
    $builder->addUnit(new InconvertibleUnitDataType('malawianKwacha', array('MWK','malawian kwacha'))); // TODO: 'kwacha' is also used, but clashes with zambianKwacha.
    $builder->addUnit(new InconvertibleUnitDataType('zambianKwacha', array('ZMK','zambian kwacha'))); // TODO: 'kwacha' is also used, but clashes with malawianKwacha.
    $builder->addUnit(new InconvertibleUnitDataType('mexicanPeso', array('MXN','Mexican peso')));
    $builder->addUnit(new InconvertibleUnitDataType('malaysianRinggit', array('MYR','Malaysian ringgit')));
    $builder->addUnit(new InconvertibleUnitDataType('mozambicanMetical', array('MZN','Metical')));
    $builder->addUnit(new InconvertibleUnitDataType('namibianDollar', array('NAD','Namibian dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('nigerianNaira', array('NGN','Naira','naira')));
    $builder->addUnit(new InconvertibleUnitDataType('nicaraguanCórdoba', array('NIO','Cordoba oro', 'C$')));
    $builder->addUnit(new InconvertibleUnitDataType('norwegianKrone', array('NOK','Norwegian krone')));
    $builder->addUnit(new InconvertibleUnitDataType('nepaleseRupee', array('NPR','Nepalese rupee')));
    $builder->addUnit(new InconvertibleUnitDataType('newZealandDollar', array('NZD','New Zealand dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('omaniRial', array('OMR','Rial Omani', 'Omani rial')));
    $builder->addUnit(new InconvertibleUnitDataType('panamanianBalboa', array('PAB','Balboa')));
    $builder->addUnit(new InconvertibleUnitDataType('peruvianNuevoSol', array('PEN','Nuevo sol')));
    $builder->addUnit(new InconvertibleUnitDataType('papuaNewGuineanKina', array('PGK','Kina')));
    $builder->addUnit(new InconvertibleUnitDataType('philippinePeso', array('PHP','Philippine peso')));
    $builder->addUnit(new InconvertibleUnitDataType('pakistaniRupee', array('PKR','Pakistan rupee')));
    $builder->addUnit(new InconvertibleUnitDataType('polishZłoty', array('PLN','Zloty', 'Złoty')));
    $builder->addUnit(new InconvertibleUnitDataType('paraguayanGuarani', array('PYG','Guarani')));
    $builder->addUnit(new InconvertibleUnitDataType('qatariRial', array('QAR','Qatari rial')));
    $builder->addUnit(new InconvertibleUnitDataType('romanianNewLeu', array('RON','Romanian new leu')));
    $builder->addUnit(new InconvertibleUnitDataType('serbianDinar', array('RSD','Serbian dinar')));
    $builder->addUnit(new InconvertibleUnitDataType('rwandaFranc', array('RWF','Rwanda franc')));
    $builder->addUnit(new InconvertibleUnitDataType('saudiRiyal', array('SAR','Saudi riyal')));
    $builder->addUnit(new InconvertibleUnitDataType('solomonIslandsDollar', array('SBD','Solomon Islands dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('seychellesRupee', array('SCR','Seychelles rupee')));
    $builder->addUnit(new InconvertibleUnitDataType('sudanesePound', array('SDG','Sudanese pound')));
    $builder->addUnit(new InconvertibleUnitDataType('swedishKrona', array('SEK','kr','Swedish krona')));
    $builder->addUnit(new InconvertibleUnitDataType('singaporeDollar', array('SGD','Singapore dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('saintHelenaPound', array('SHP','Saint Helena pound')));
    $builder->addUnit(new InconvertibleUnitDataType('slovakKoruna', array('SKK','Slovak koruna')));
    $builder->addUnit(new InconvertibleUnitDataType('sierraLeoneanLeone', array('SLL','Leone')));
    $builder->addUnit(new InconvertibleUnitDataType('somaliShilling', array('SOS','Somali shilling')));
    $builder->addUnit(new InconvertibleUnitDataType('surinamDollar', array('SRD','Surinam dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('sãoToméAndPríncipeDobra', array('STD','Dobra')));
    $builder->addUnit(new InconvertibleUnitDataType('syrianPound', array('SYP','Syrian pound')));
    $builder->addUnit(new InconvertibleUnitDataType('swaziLilangeni', array('SZL','Lilangeni')));
    $builder->addUnit(new InconvertibleUnitDataType('thaiBaht', array('THB','Baht')));
    $builder->addUnit(new InconvertibleUnitDataType('tajikistaniSomoni', array('TJS','Somoni')));
    $builder->addUnit(new InconvertibleUnitDataType('turkmenistaniManat', array('TMT','turkmenistani manat'))); // old code: TMM
    $builder->addUnit(new InconvertibleUnitDataType('azerbaijaniManat', array('AZN','azerbaijani manat','azerbaijanian manat')));
    $builder->addUnit(new InconvertibleUnitDataType('tunisianDinar', array('TND','Tunisian dinar')));
    $builder->addUnit(new InconvertibleUnitDataType('tonganPaanga', array('TOP','Paanga'))); // correct: 'Tongan Paʻanga'
    $builder->addUnit(new InconvertibleUnitDataType('turkishLira', array('TRY','turkish lira')));
    $builder->addUnit(new InconvertibleUnitDataType('trinidadAndTobagoDollar', array('TTD','Trinidad and Tobago dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('newTaiwanDollar', array('TWD','New Taiwan dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('tanzanianShilling', array('TZS','Tanzanian shilling')));
    $builder->addUnit(new InconvertibleUnitDataType('ukrainianHryvnia', array('UAH','Hryvnia')));
    $builder->addUnit(new InconvertibleUnitDataType('ugandaShilling', array('UGX','Uganda shilling')));
    $builder->addUnit(new InconvertibleUnitDataType('uruguayanPeso', array('UYU','Peso Uruguayo')));
    $builder->addUnit(new InconvertibleUnitDataType('venezuelanBolívar', array('VEF','Venezuelan bolívar fuerte')));
    $builder->addUnit(new InconvertibleUnitDataType('vanuatuVatu', array('VUV','Vatu')));
    $builder->addUnit(new InconvertibleUnitDataType('samoanTala', array('WST','Samoan tala')));
    $builder->addUnit(new InconvertibleUnitDataType('centralAfricanCfaFranc', array('XAF','CFA franc BEAC')));
    $builder->addUnit(new InconvertibleUnitDataType('eastCaribbeanDollar', array('XCD','East Caribbean dollar')));
    $builder->addUnit(new InconvertibleUnitDataType('westAfricanCfaFranc', array('XOF','CFA Franc BCEAO')));
    $builder->addUnit(new InconvertibleUnitDataType('cfpFranc', array('XPF','CFP franc')));
    $builder->addUnit(new InconvertibleUnitDataType('yemeniRial', array('YER','Yemeni rial')));
    $builder->addUnit(new InconvertibleUnitDataType('southAfricanRand', array('ZAR','South African rand')));
    $builder->addUnit(new InconvertibleUnitDataType('zimbabweanDollar', array('ZWD','Zimbabwe dollar')));

    $builder->addDimension('Density');
    $builder->addUnit(new StandardUnitDataType('kilogramPerCubicMetre', array('kg·m−3','kg/m³','kg/m3','kg·m','kilogram per cubic metre')));
    $builder->addUnit(new FactorUnitDataType('kilogramPerLitre', array('kg/l','kg/L','kilogram per litre'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('gramPerCubicCentimetre', array('g/cc','g/cm3','g/cm³','gram per cubic centimetre'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('gramPerMillilitre', array('g/ml','g/mL','gram per millilitre'), 1000.0));

    $builder->addDimension('Energy');
    $builder->addUnit(new StandardUnitDataType('joule', array('J','joule')));
    $builder->addUnit(new FactorUnitDataType('kilojoule', array('kJ','kilojoule'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('erg', array('erg'), 1.0E-7));
    $builder->addUnit(new FactorUnitDataType('milliwattHour', array('mWh','milliwatt-hour'), 3.6));
    $builder->addUnit(new FactorUnitDataType('wattHour', array('Wh','watt-hour'), 3600.0));
    $builder->addUnit(new FactorUnitDataType('kilowattHour', array('kWh','kilowatt-hour'), 3600000.0));
    $builder->addUnit(new FactorUnitDataType('megawattHour', array('MWh','megawatt-hour'), 3600000000.0));
    $builder->addUnit(new FactorUnitDataType('gigawattHour', array('GWh','gigawatt-hour'), 3600000000000.0));
    $builder->addUnit(new FactorUnitDataType('terawattHour', array('TWh','terawatt-hour'), 3600000000000000.0));
    // $builder->addUnit(new FactorUnitDataType('electronVolt', array('eV','electron volt'), 'missing conversion factor'));
    $builder->addUnit(new FactorUnitDataType('millicalorie', array('mcal','millicalorie'), 0.0041868));
    $builder->addUnit(new FactorUnitDataType('calorie', array('cal','calorie'), 4.1868));
    $builder->addUnit(new FactorUnitDataType('kilocalorie', array('kcal','kilocalorie'), 4186.8));
    $builder->addUnit(new FactorUnitDataType('megacalorie', array('Mcal','megacalorie'), 4186800.0));
    $builder->addUnit(new FactorUnitDataType('inchPound', array('inlb','inch-pound'), 0.11298482902));
    $builder->addUnit(new FactorUnitDataType('footPound', array('ftlb','foot-pound'), 1.3558179483));

    $builder->addDimension('FlowRate');
    $builder->addUnit(new StandardUnitDataType('cubicMetrePerSecond', array('m\u00B3/s','m³/s','cubic metre per second')));
    $builder->addUnit(new FactorUnitDataType('cubicFeetPerSecond', array('ft\u00B3/s','ft³/s','cuft/s','cubic feet per second'), 0.028316846593));
    $builder->addUnit(new FactorUnitDataType('cubicMetrePerYear', array('m\u00B3/y','m³/y','cubic metre per year'), 3.1709791983765E-8));
    $builder->addUnit(new FactorUnitDataType('cubicFeetPerYear', array('ft\u00B3/y','ft³/y','cubic feet per year'), 8.9792131512047E-10));

    $builder->addDimension('Force');
    $builder->addUnit(new StandardUnitDataType('newton', array('N','newton')));
    $builder->addUnit(new FactorUnitDataType('nanonewton', array('nN','nanonewton'), 1.0E-9));
    $builder->addUnit(new FactorUnitDataType('millinewton', array('mN','millinewton'), 0.001));
    $builder->addUnit(new FactorUnitDataType('kilonewton', array('kN','kilonewton'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('meganewton', array('MN','meganewton'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('giganewton', array('GN','giganewton'), 1000000000.0));
    $builder->addUnit(new FactorUnitDataType('tonneForce', array('tf','t-f','tonne-force'), 9806.65));
    $builder->addUnit(new FactorUnitDataType('megapond', array('Mp','megapond'), 9806.65));
    $builder->addUnit(new FactorUnitDataType('kilogramForce', array('kgf','kg-f','kilogram-force'), 9.80665));
    $builder->addUnit(new FactorUnitDataType('kilopond', array('kp','kilopond'), 9.80665));
    $builder->addUnit(new FactorUnitDataType('gramForce', array('gf','g-f','gram-force'), 0.00980665));
    $builder->addUnit(new FactorUnitDataType('pond', array('p','pond'), 0.00980665));
    $builder->addUnit(new FactorUnitDataType('milligramForce', array('mgf','mg-f','milligram-force'), 0.00980665));
    $builder->addUnit(new FactorUnitDataType('millipond', array('mp','millipond'), 0.00980665));
    $builder->addUnit(new FactorUnitDataType('poundal', array('pdl','poundal'), 0.1383));

    $builder->addDimension('Frequency');
    $builder->addUnit(new StandardUnitDataType('hertz', array('Hz','hertz')));
    $builder->addUnit(new FactorUnitDataType('millihertz', array('mHz','millihertz'), 0.001));
    $builder->addUnit(new FactorUnitDataType('kilohertz', array('kHz','kilohertz'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('megahertz', array('MHz','megahertz'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('gigahertz', array('GHz','gigahertz'), 1000000000.0));

    $builder->addDimension('FuelEfficiency');
    $builder->addUnit(new StandardUnitDataType('kilometresPerLitre', array('km/l','km/L','kilometres per litre')));
    // $builder->addUnit(new FactorUnitDataType('litresPerKilometre', array('l/km','L/km','litres per kilometre'), 'missing conversion factor'));
    // $builder->addUnit(new FactorUnitDataType('milesPerImperialGallon', array('mpgimp','miles per imperial gallon'), 'missing conversion factor'));
    // $builder->addUnit(new FactorUnitDataType('milesPerUsGallon', array('mpgus','miles per US gallon'), 'missing conversion factor'));
    // $builder->addUnit(new FactorUnitDataType('imperialGallonsPerMile', array('impgal/mi','imperial gallons per mile'), 'missing conversion factor'));
    // $builder->addUnit(new FactorUnitDataType('usGallonsPerMile', array('usgal/mi','US gallons per mile'), 'missing conversion factor'));

    $builder->addDimension('InformationUnit');
    $builder->addUnit(new StandardUnitDataType('byte', array('B','byte')));
    $builder->addUnit(new FactorUnitDataType('bit', array('bit'), 0.125));
    $builder->addUnit(new FactorUnitDataType('kilobit', array('kbit','kilobit'), 128.0));
    $builder->addUnit(new FactorUnitDataType('megabit', array('Mbit','megabit'), 131072.0));
    $builder->addUnit(new FactorUnitDataType('kilobyte', array('kB','kilobyte'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('megabyte', array('MB','megabyte'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('gigabyte', array('GB','gigabyte'), 1000000000.0));
    $builder->addUnit(new FactorUnitDataType('terabyte', array('TB','terabyte'), 1000000000000.0));

    $builder->addDimension('Length');
    $builder->addUnit(new StandardUnitDataType('metre', array('m','meter','metres','metre')));
    $builder->addUnit(new FactorUnitDataType('nanometre', array('nm','nanometre'), 1.0E-9));
    $builder->addUnit(new FactorUnitDataType('micrometre', array('µm','micrometre'), 1.0E-6));
    $builder->addUnit(new FactorUnitDataType('millimetre', array('mm','millimetre'), 0.001));
    $builder->addUnit(new FactorUnitDataType('centimetre', array('cm','centimetre'), 0.01));
    $builder->addUnit(new FactorUnitDataType('decimetre', array('dm','decimetre'), 0.1));
    $builder->addUnit(new FactorUnitDataType('decametre', array('dam','decametre'), 10.0));
    $builder->addUnit(new FactorUnitDataType('hectometre', array('hm','hectometre'), 100.0));
    $builder->addUnit(new FactorUnitDataType('kilometre', array('km','kilometre'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('megametre', array('Mm','megametre'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('gigametre', array('Gm','gigametre'), 1000000000.0));
    $builder->addUnit(new FactorUnitDataType('inch', array('in','inch'), 0.0254));
    $builder->addUnit(new FactorUnitDataType('hand', array('hand'), 0.1016));
    $builder->addUnit(new FactorUnitDataType('foot', array('ft','feet','foot'), 0.3048));
    $builder->addUnit(new FactorUnitDataType('yard', array('yd','yard'), 0.9144));
    $builder->addUnit(new FactorUnitDataType('fathom', array('fathom'), 1.8288));
    $builder->addUnit(new FactorUnitDataType('rod', array('rd','perch','pole','rod'), 5.0292));
    $builder->addUnit(new FactorUnitDataType('chain', array('chain'), 20.1168));
    $builder->addUnit(new FactorUnitDataType('furlong', array('furlong'), 201.168));
    $builder->addUnit(new FactorUnitDataType('mile', array('mi','miles','mile'), 1609.344));
    $builder->addUnit(new FactorUnitDataType('nautialMile', array('nmi','nautial mile'), 1852.01));
    $builder->addUnit(new FactorUnitDataType('astronomicalUnit', array('AU','astronomical unit'), 149597870691.0));
    $builder->addUnit(new FactorUnitDataType('lightYear', array('ly','light-year'), 9460730472580800.0));
    $builder->addUnit(new FactorUnitDataType('kilolightYear', array('kly','kilolight-year'), 9.4607304725808E+18));

    $builder->addDimension('Mass');
    $builder->addUnit(new StandardUnitDataType('gram', array('g','gram')));
    $builder->addUnit(new FactorUnitDataType('milligram', array('mg','milligram'), 0.001));
    $builder->addUnit(new FactorUnitDataType('kilogram', array('kg','kilogram'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('tonne', array('t','tonne'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('stone', array('st','stone'), 6350.29318));
    $builder->addUnit(new FactorUnitDataType('pound', array('lb','lbs','lbm','pound'), 453.6));
    $builder->addUnit(new FactorUnitDataType('ounce', array('oz','ounce'), 28.35));
    $builder->addUnit(new FactorUnitDataType('grain', array('gr','grain'), 0.0648));
    $builder->addUnit(new FactorUnitDataType('carat', array('carat'), 0.2));
    // $builder->addUnit(new FactorUnitDataType('atomicMassUnit', array('Da','u','atomic mass unit'), 'missing conversion factor'));

    $builder->addDimension('PopulationDensity');
    $builder->addUnit(new StandardUnitDataType('inhabitantsPerSquareKilometre', array('PD/sqkm','/sqkm','per square kilometre','inhabitants per square kilometre')));
    // $builder->addUnit(new FactorUnitDataType('inhabitantsPerHectare', array('PD/ha','/ha','per hectare','inhabitants per hectare'), 'missing conversion factor'));
    $builder->addUnit(new FactorUnitDataType('inhabitantsPerSquareMile', array('PD/sqmi','/sqmi','per square mile','inhabitants per square mile'), 1.0 / 2.589988110336));
    // $builder->addUnit(new FactorUnitDataType('inhabitantsPerAcre', array('PD/acre','/acre','per acre','inhabitants per acre'), 'missing conversion factor'));

    $builder->addDimension('Power');
    $builder->addUnit(new StandardUnitDataType('watt', array('W','watt')));
    $builder->addUnit(new FactorUnitDataType('kilowatt', array('kW','kilowatt'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('milliwatt', array('mW','milliwatt'), 0.001));
    $builder->addUnit(new FactorUnitDataType('megawatt', array('MW','megawatt'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('gigawatt', array('GW','gigawatt'), 1000000000.0));
    $builder->addUnit(new FactorUnitDataType('horsepower', array('hp','horsepower'), 745.72218));
    $builder->addUnit(new FactorUnitDataType('pferdestaerke', array('PS','pferdestaerke'), 735.49875));
    $builder->addUnit(new FactorUnitDataType('brake horsepower', array('bhp','brake horsepower'), 745.7));

    $builder->addDimension('Pressure');
    $builder->addUnit(new StandardUnitDataType('pascal', array('Pa','pascal')));
    $builder->addUnit(new FactorUnitDataType('millipascal', array('mPa','millipascal'), 0.001));
    $builder->addUnit(new FactorUnitDataType('hectopascal', array('hPa','hectopascal'), 0.01));
    $builder->addUnit(new FactorUnitDataType('kilopascal', array('kPa','kilopascal'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('megapascal', array('MPa','megapascal'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('millibar', array('mbar','mb','millibar'), 100.0));
    $builder->addUnit(new FactorUnitDataType('decibar', array('dbar','decibar'), 10000.0));
    $builder->addUnit(new FactorUnitDataType('bar', array('bar'), 100000.0));
    $builder->addUnit(new FactorUnitDataType('standardAtmosphere', array('atm','standard atmosphere'), 101325.0));
    $builder->addUnit(new FactorUnitDataType('poundPerSquareInch', array('psi','pound per square inch'), 6894.7572932));

    $builder->addDimension('Speed');
    $builder->addUnit(new StandardUnitDataType('kilometrePerHour', array('km/h','kmh','kilometre per hour')));
    $builder->addUnit(new FactorUnitDataType('metrePerSecond', array('m/s','ms','metre per second'), 3.6));
    $builder->addUnit(new FactorUnitDataType('kilometrePerSecond', array('km/s','kilometre per second'), 3600.0));
    $builder->addUnit(new FactorUnitDataType('milePerHour', array('mph','mi/h','mile per hour'), 1.60934));
    $builder->addUnit(new FactorUnitDataType('footPerSecond', array('ft/s','foot per second'), 0.0003048333333));
    $builder->addUnit(new FactorUnitDataType('footPerMinute', array('ft/min','foot per minute'), 0.01829));
    $builder->addUnit(new FactorUnitDataType('knot', array('kn','knot'), 1.852));

    $builder->addDimension('Temperature');
    $builder->addUnit(new StandardUnitDataType('degreeCelsius', array('°C','degree celsius','C','Celsius')));
    $builder->addUnit(new OffsetFactorUnitDataType('kelvin', array('K','kelvin'), -273.15, 1.0));
    $builder->addUnit(new OffsetFactorUnitDataType('degreeFahrenheit', array('°F','F','Fahrenheit','degree fahrenheit'), -32.0, 5.0 / 9.0));
    $builder->addUnit(new OffsetFactorUnitDataType('degreeRankine', array('°R','R','degree rankine'), -491.67, 5.0 / 9.0));

    $builder->addDimension('Time');
    $builder->addUnit(new StandardUnitDataType('second', array('s','sec','secs','second','seconds')));
    $builder->addUnit(new FactorUnitDataType('minute', array('m','min','min.','mins','minute','minutes'), 60.0));
    $builder->addUnit(new FactorUnitDataType('hour', array('h','hr','hr.','hour','hours','std'), 3600.0));
    $builder->addUnit(new FactorUnitDataType('day', array('d','days','day'), 86400.0));

    $builder->addDimension('Torque');
    $builder->addUnit(new StandardUnitDataType('newtonMetre', array('Nm','N.m','N·m', 'newton metre')));
    $builder->addUnit(new FactorUnitDataType('newtonMillimetre', array('Nmm','newton millimetre'), 0.001));
    $builder->addUnit(new FactorUnitDataType('newtonCentimetre', array('Ncm','newton centimetre'), 0.001));
    $builder->addUnit(new FactorUnitDataType('poundFoot', array('ftlb-f', 'ftlbf', 'lbft'), 1.3558179483314));

    $builder->addDimension('Volume');
    $builder->addUnit(new StandardUnitDataType('cubicMetre', array('m3','m³','cubic metre')));
    $builder->addUnit(new FactorUnitDataType('cubicMillimetre', array('mm3','mm³','cubic millimetre'), 1.0E-9));
    $builder->addUnit(new FactorUnitDataType('cubicCentimetre', array('cm3','cm³','cc','cubic centimetre'), 1.0E-6));
    $builder->addUnit(new FactorUnitDataType('cubicDecimetre', array('dm3','dm³','cubic decimetre'), 0.001));
    $builder->addUnit(new FactorUnitDataType('cubicDecametre', array('dam3','cubic decametre'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('cubicHectometre', array('hm3','hm³','cubic hectometre'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('cubicKilometre', array('km3','km³','cubic kilometre'), 1000000000.0));
    $builder->addUnit(new FactorUnitDataType('microlitre', array('ul','uL','microlitre'), 1.0E-9));
    $builder->addUnit(new FactorUnitDataType('millilitre', array('ml','mL','millilitre'), 1.0E-6));
    $builder->addUnit(new FactorUnitDataType('centilitre', array('cl','cL','centilitre'), 1.0E-5));
    $builder->addUnit(new FactorUnitDataType('decilitre', array('dl','dL','decilitre'), 0.0001));
    $builder->addUnit(new FactorUnitDataType('litre', array('l','L','litre'), 0.001));
    // $builder->addUnit(new FactorUnitDataType('decalitre', array('dal','daL','decalitre'), 'missing conversion factor'));
    $builder->addUnit(new FactorUnitDataType('hectolitre', array('hl','hL','hectolitre'), 0.1));
    $builder->addUnit(new FactorUnitDataType('kilolitre', array('kl','kL','kilolitre'), 1.0));
    $builder->addUnit(new FactorUnitDataType('megalitre', array('Ml','ML','megalitre'), 1000.0));
    $builder->addUnit(new FactorUnitDataType('gigalitre', array('Gl','GL','gigalitre'), 1000000.0));
    $builder->addUnit(new FactorUnitDataType('cubicMile', array('cumi','mi3','mi³','cubic mile'), 4168181825.4406));
    $builder->addUnit(new FactorUnitDataType('cubicYard', array('cuyd','yd3','cubic yard'), 0.764692));
    $builder->addUnit(new FactorUnitDataType('cubicFoot', array('cuft','ft3','ft³','cubic foot'), 0.0283219));
    $builder->addUnit(new FactorUnitDataType('cubicInch', array('cuin','in3','in³','cubic inch'), 1.639E-5));
    $builder->addUnit(new FactorUnitDataType('imperialBarrel', array('impbl','imperial barrel'), 0.163659));
    $builder->addUnit(new FactorUnitDataType('usBarrel', array('usbl','us barrel'), 0.11924));
    $builder->addUnit(new FactorUnitDataType('imperialBarrelOil', array('impbbl','imperial barrel oil'), 0.159113));
    $builder->addUnit(new FactorUnitDataType('usBarrelOil', array('usbbl','us barrel oil'), 0.158987));
    $builder->addUnit(new FactorUnitDataType('imperialGallon', array('impgal','imperial gallon'), 0.00454609));
    $builder->addUnit(new FactorUnitDataType('usGallon', array('usgal','USgal','us gallon'), 0.00378541178));

    $builder->addDimension("LinearMassDensity");
    $builder->addUnit(new StandardUnitDataType('gramPerKilometre', array('g/km')));

    }
}
}
