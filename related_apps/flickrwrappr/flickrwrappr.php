<?php

/**
 * @author Christian Becker
 */

include ("common.php");
include ("config.inc.php");
include ("flickrService.php");
include(RDFAPI_INCLUDE_DIR . "RdfAPI.php");
include(RDFAPI_INCLUDE_DIR . PACKAGE_SYNTAX_RDF);

/**
 * Retrieves label, latitude, longitude for a given DBpedia.org resource
 * 
 * @param RESOURCE  DBpedia.org resource URI
 * @param GRAPH_URI
 */
$QUERY_LLL = <<<END
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX wgs84_pos: <http://www.w3.org/2003/01/geo/wgs84_pos#>
SELECT ?label ?lat ?long
FROM <##GRAPH_URI##>
WHERE { 
        <##RESOURCE##> rdfs:label ?label .
        OPTIONAL {
            <##RESOURCE##> wgs84_pos:lat ?lat .
            <##RESOURCE##> wgs84_pos:long ?long
        }
}
END;

/**
 * Retrieves resources and associated Flickr image and page URLs from flickrwrappr result sets
 */
$QUERY_DISPLAY = <<<END
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT *
WHERE {
		?res foaf:depiction ?img .
        ?img foaf:page ?flickrpage
}
END;

/**
 * HTML Display
 * 
 * @param TITLE
 * @param PHOTOS_HTML
 * @param RDF
 * @param FLICKRWRAPPR_HOMEPAGE
 * @param FLICKR_TOS_URL
 */
$HTML_TEMPLATE_RESULTS = <<<END
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>##TITLE##</title>
<style>
body {
 font-family: Arial, Helvetica, sans-serif;
  padding: 0 10% 0 10%;
}
h1 {
 font-size: 20px;
 color: #800;
}
p, pre {
 border: dashed 2px #666666;
 padding: 10px;
 white-space: pre-wrap;       /* css-3 */
 white-space: -moz-pre-wrap !important;  /* Mozilla, since 1999 */
 white-space: -pre-wrap;      /* Opera 4-6 */
 white-space: -o-pre-wrap;    /* Opera 7 */
 word-wrap: break-word;       /* Internet Explorer 5.5+ */
 width: 99%;
}
img {
 margin: 5px;
 border: 0;
}
</style>
</head>

<body>
<h1>##TITLE##</h1>
<p>##PHOTOS_HTML##</p>
<h1>RDF</h1>
<pre>##RDF##</pre>
<hr/>
Generated by the <a href="##FLICKRWRAPPR_HOMEPAGE##">flickr&#x2122; wrappr</a>.<br/>
This product uses the Flickr API but is not endorsed or certified by Flickr. Use is subject to the <a href="##FLICKR_TOS_URL##">Flickr Terms of Service</a>.
</body>
</html>
END;

/**
 * HTML Display
 * 
 * @param SRC - URL to display
 * @param HREF - URL to link
 */
$HTML_TEMPLATE_PHOTO = <<<END
<a href="##HREF##"><img src="##SRC##"/></a>
END;

/**
 * HTML Display
 * 
 * @param TITLE
 * @param MESSAGE
 * @param FLICKRWRAPPR_HOMEPAGE
 */
$HTML_TEMPLATE_ERROR = <<<END
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>##TITLE##</title>
<style>
body {
 font-family: Arial, Helvetica, sans-serif;
  padding: 0 10% 0 10%;
}
h1 {
 font-size:20px;
 color: #800;
}
p, pre {
 border: dashed 2px #666666;
 padding: 10px;
 white-space: pre-wrap;       /* css-3 */
 white-space: -moz-pre-wrap !important;  /* Mozilla, since 1999 */
 white-space: -pre-wrap;      /* Opera 4-6 */
 white-space: -o-pre-wrap;    /* Opera 7 */
 word-wrap: break-word;       /* Internet Explorer 5.5+ */
 width: 99%; 
}
img {
 margin: 5px;
}
</style>
</head>

<body>
<h1>##TITLE##</h1>
<p>##MESSAGE##</p>
<hr>
Generated by the <a href="##FLICKRWRAPPR_HOMEPAGE##">flickr&#x2122; wrappr</a>.
</body>
</html>
END;


function DBpediaLookup($item, &$resultsLabel, &$resourceFound) {
	global $QUERY_LLL, $FLICKRSERVICE;
	
	$resURI = DBPEDIA_URI_ROOT . wikipediaEncode($item);
	$photosDocURI = FLICKRWRAPPR_PHOTOS_DOC_URI_ROOT . wikipediaEncode($item);

	/* Prepare SPARQL query for label, latitude, longitude */
	$queryString = parameterize($QUERY_LLL, array("RESOURCE" => $resURI, "GRAPH_URI" => SPARQL_GRAPH_URI));
	$query = new ClientQuery();
	$query->query($queryString);

	/* Perform SPARQL query */
	$sparqlClient = ModelFactory::getSparqlClient(SPARQL_ENDPOINT_URL);
	$queryResult = $sparqlClient->query($query);

	/* Initialize result model */
	$resultModel = ModelFactory::getMemModel();
	$resultModel->addNamespace('foaf', 'http://xmlns.com/foaf/0.1/');
	$resultModel->addNamespace('dcterms', 'http://purl.org/dc/terms/');
	$resultModel->addNamespace('rdfs', 'http://www.w3.org/2000/01/rdf-schema#');

	/* Perform flickr search */
	$processedLabels = array();
	
	$resourceFound = !empty($queryResult);
	if (is_array($queryResult))
		foreach ($queryResult as $resultElement) {
	    
		    $label = $resultElement['?label']->getLabel();
		    
		    /* Workaround #1: Virtuoso trailing quote bug */    
		    if (substr($label, -1) == '"')
		        $label = substr($label, 0, -1);
		            
		    /* Workaround #2: For some reason, the result is UTF8-encoded twice [seems to be fixed now!] */
		    //$label = utf8_decode($label);
		    
		    /* Multiple languages may have the same label */
		    if (in_array($label, $processedLabels))
		        continue;
		    else
		        $processedLabels[] = $label;    
		        
		    if ($resultElement['?lat'] instanceof Literal &&
		        $resultElement['?long'] instanceof Literal) {
		            $flickrPhotos = $FLICKRSERVICE->getFlickrPhotos($label, 
		                                                        $resultElement['?lat']->getLabel(), 
		                                                        $resultElement['?long']->getLabel(),
		                                                        SEARCH_RADIUS_KM);
		    }
		    else {
		        $flickrPhotos = $FLICKRSERVICE->getFlickrPhotos($label);
		    }

		    /* Process found photos */
			foreach ($flickrPhotos as $flickrPhoto) {
		        /* Provide the picture itself (small version) */
				$resultModel->add(new Statement(new Resource($resURI),
		                                        new Resource("http://xmlns.com/foaf/0.1/depiction"),
		                                        new Resource($flickrPhoto['imgsmall'])));
												
		        /* Provide its page on flickr */
				$resultModel->add(new Statement(new Resource($flickrPhoto['imgsmall']),
		                                        new Resource("http://xmlns.com/foaf/0.1/page"),
		                                        new Resource($flickrPhoto['flickrpage'])));	    
			}
		    
		    if ($resultModel->size() >= MINIMUM_RESULT_COUNT * 2)
		        break;
		} /* $queryResult */
		
		if ($resultModel->size() > 0) {
		    /* Add metadata */
		    $resultModel->add(new Statement(new Resource($photosDocURI),
				      		    new Resource("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
				      		    new Resource("http://xmlns.com/foaf/0.1/Document")));
			
		    $resultsLabel = "Photos for DBpedia.org resource " . $_REQUEST['item'];
		    $resultModel->add(new Statement(new Resource($photosDocURI),
				      		    new Resource("http://www.w3.org/2000/01/rdf-schema#label"),
				      		    new Literal($resultsLabel, "en")));

		    $resultModel->add(new Statement(new Resource($photosDocURI),
				      		    new Resource("http://xmlns.com/foaf/0.1/primaryTopic"),
				      		    new Resource($resURI)));
				      		    
		    $resultModel->add(new Statement(new Resource($photosDocURI),
				      		    new Resource("http://purl.org/dc/terms/license"),
				      		    new Resource(FLICKR_TOS_URL)));
				      		    
		    $resultModel->add(new Statement(new Resource($photosDocURI),
				      		    new Resource("http://xmlns.com/foaf/0.1/maker"),
				      		    new Resource(FLICKRWRAPPR_HOMEPAGE)));

		    $resultModel->add(new Statement(new Resource(FLICKRWRAPPR_HOMEPAGE),
				      		    new Resource("http://www.w3.org/2000/01/rdf-schema#label"),
				      		    new Literal("flickr(tm) wrappr", "en")));	
		}
	
	return $resultModel;
}

function geoLookup($lat, $long, $radius, &$resultsLabel) {
	global $FLICKRSERVICE;
	
	$resURI = DBPEDIA_URI_ROOT . wikipediaEncode($_REQUEST['item']);
	$locationURI = FLICKRWRAPPR_LOCATION_URI_ROOT . $_REQUEST['lat'] . '/' . $_REQUEST['long'] . '/' . $_REQUEST['radius'];
	$dataURI = FLICKRWRAPPR_LOCATION_DATA_URI_ROOT . $_REQUEST['lat'] . '/' . $_REQUEST['long'] . '/' . $_REQUEST['radius'];

	/* Initialize result model */
	$resultModel = new MemModel();
	$resultModel->addNamespace('foaf', 'http://xmlns.com/foaf/0.1/');
	$resultModel->addNamespace('dcterms', 'http://purl.org/dc/terms/');
	$resultModel->addNamespace('rdfs', 'http://www.w3.org/2000/01/rdf-schema#');
	//$resultModel->addNamespace('geonames', 'http://www.geonames.org/ontology#');
	$resultModel->addNamespace('geo', 'http://www.w3.org/2003/01/geo/wgs84_pos#');
	$resultModel->addNamespace('georss', 'http://www.georss.org/georss/');

	/* Perform flickr search */
	$flickrPhotos = $FLICKRSERVICE->getFlickrPhotos('', $lat, $long, $radius / 1000);
	
	/* Process found photos */	
	foreach ($flickrPhotos as $flickrPhoto) {
		/* Provide the picture itself (small version) */	
		$resultModel->add(new Statement(new Resource($locationURI),
										new Resource("http://xmlns.com/foaf/0.1/depiction"),
										new Resource($flickrPhoto['imgsmall'])));

		/* Provide its page on flickr */
		$resultModel->add(new Statement(new Resource($flickrPhoto['imgsmall']),
	                                        new Resource("http://xmlns.com/foaf/0.1/page"),
	                                        new Resource($flickrPhoto['flickrpage'])));	 										
	}
	
	if ($resultModel->size() > 0) {
	    /* Add metadata for location */
	    $resultModel->add(new Statement(new Resource($locationURI),
			      		    new Resource("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
			      		    new Resource("http://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing")));

		$latLiteral = new Literal($lat);
		$latLiteral->setDatatype("http://www.w3.org/2001/XMLSchema#float");
		
	    $resultModel->add(new Statement(new Resource($locationURI),
			      		    new Resource("http://www.w3.org/2003/01/geo/wgs84_pos#lat"),
			      		    $latLiteral));
							
		$longLiteral = new Literal($long);
		$longLiteral->setDatatype("http://www.w3.org/2001/XMLSchema#float");

	    $resultModel->add(new Statement(new Resource($locationURI),
			      		    new Resource("http://www.w3.org/2003/01/geo/wgs84_pos#long"),
			      		    $longLiteral));
							
		$radiusLiteral = new Literal($radius);
		$radiusLiteral->setDatatype("http://www.w3.org/2001/XMLSchema#double");
		
	    $resultModel->add(new Statement(new Resource($locationURI),
			      		    new Resource("http://www.georss.org/georss/radius"),
			      		    $radiusLiteral));

		/* Add metadata for document */
	    $resultModel->add(new Statement(new Resource($dataURI),
			      		    new Resource("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
			      		    new Resource("http://xmlns.com/foaf/0.1/Document")));

	    $resultsLabel = "Photos taken within $radius meters of geographic location lat=$lat long=$long";
	    $resultModel->add(new Statement(new Resource($dataURI),
			      		    new Resource("http://www.w3.org/2000/01/rdf-schema#label"),
			      		    new Literal($resultsLabel, "en")));

	    $resultModel->add(new Statement(new Resource($dataURI),
			      		    new Resource("http://xmlns.com/foaf/0.1/primaryTopic"),
			      		    new Resource($locationURI)));
			      		    
	    $resultModel->add(new Statement(new Resource($dataURI),
			      		    new Resource("http://purl.org/dc/terms/license"),
			      		    new Resource(FLICKR_TOS_URL)));
			      		    
	    $resultModel->add(new Statement(new Resource($dataURI),
			      		    new Resource("http://xmlns.com/foaf/0.1/maker"),
			      		    new Resource(FLICKRWRAPPR_HOMEPAGE)));

	    $resultModel->add(new Statement(new Resource(FLICKRWRAPPR_HOMEPAGE),
			      		    new Resource("http://www.w3.org/2000/01/rdf-schema#label"),
			      		    new Literal("flickr(tm) wrappr", "en")));	
	}
	
	return $resultModel;
}

/* Main */
$FLICKRSERVICE = new flickrService(FLICKR_API_KEY, NUM_RESULTS_PER_QUERY, ONLY_CC_DERIV);

$resultModel = (isset($_REQUEST['item']) 
					? DBpediaLookup($_REQUEST['item'], $resultsLabel, $resourceFound)
					: geoLookup($_REQUEST['lat'], $_REQUEST['long'], $_REQUEST['radius'], $resultsLabel));

if ($resultModel->size() == 0) {
	if (isset($FLICKRSERVICE->errCode)) {
		header("HTTP/1.1 500 Internal Server Error");
		echo(parameterize($HTML_TEMPLATE_ERROR, 
				array('TITLE' => 'Flickr error #' . $FLICKRSERVICE->errCode,
					  'MESSAGE' => $FLICKRSERVICE->errMsg,
					  'FLICKRWRAPPR_HOMEPAGE' => FLICKRWRAPPR_HOMEPAGE)));
	}
	else {
	    header("HTTP/1.1 404 Not Found");

	    if (!isset($_REQUEST['item'])) {
			echo(parameterize($HTML_TEMPLATE_ERROR, 
					array('TITLE' => 'Sorry, no photos found in the specified area',
						  'MESSAGE' => 'Please extend the search radius or verify the coordinates!',
						  'FLICKRWRAPPR_HOMEPAGE' => FLICKRWRAPPR_HOMEPAGE)));
		}
	    else if ($resourceFound) {
			echo(parameterize($HTML_TEMPLATE_ERROR, 
					array('TITLE' => 'Sorry, no photos found for DBpedia.org resource ' . $_REQUEST['item'],
						  'MESSAGE' => 'You specified a valid resource, but we were unable to locate any photos for it!',
						  'FLICKRWRAPPR_HOMEPAGE' => FLICKRWRAPPR_HOMEPAGE)));
		}
		else
		{
			echo(parameterize($HTML_TEMPLATE_ERROR, 
					array('TITLE' => 'DBpedia.org resource ' . $_REQUEST['item'] . ' does not exist',
						  'MESSAGE' => 'Sorry, we were unable to find a resource at <a href="http://dbpedia.org">http://dbpedia.org</a> that matches your request!',
						  'FLICKRWRAPPR_HOMEPAGE' => FLICKRWRAPPR_HOMEPAGE)));
		}
	}
    exit();
}
else {
    /* Output model */
    $ser = new RdfSerializer();
    $rdf = $ser->serialize($resultModel);
    
    if (clientAcceptsRDF())
		outputRdf($rdf);
    else {
		/* Prepare HTML version */
		$res = $resultModel->sparqlQuery($QUERY_DISPLAY);
		$photos_html = "";
		
		foreach ($res as $line) {
			$photos_html .= parameterize($HTML_TEMPLATE_PHOTO,
				array("SRC" => $line['?img']->getURI(),
					  "HREF" => $line['?flickrpage']->getURI()));
		}    	
	    	echo (parameterize($HTML_TEMPLATE_RESULTS,
	    		array("TITLE" => $resultsLabel,
	    		      "RDF" => htmlspecialchars($rdf),
	    		      "PHOTOS_HTML" => $photos_html,
					  "FLICKRWRAPPR_HOMEPAGE" => FLICKRWRAPPR_HOMEPAGE,
					  "FLICKR_TOS_URL" => FLICKR_TOS_URL)));
    }
}

